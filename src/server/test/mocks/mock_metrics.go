// Code generated by MockGen. DO NOT EDIT.
// Source: rss_parrot/logic (interfaces: IMetrics)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination ../test/mocks/mock_metrics.go -package mocks rss_parrot/logic IMetrics
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	logic "rss_parrot/logic"

	gomock "go.uber.org/mock/gomock"
)

// MockIMetrics is a mock of IMetrics interface.
type MockIMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockIMetricsMockRecorder
}

// MockIMetricsMockRecorder is the mock recorder for MockIMetrics.
type MockIMetricsMockRecorder struct {
	mock *MockIMetrics
}

// NewMockIMetrics creates a new mock instance.
func NewMockIMetrics(ctrl *gomock.Controller) *MockIMetrics {
	mock := &MockIMetrics{ctrl: ctrl}
	mock.recorder = &MockIMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetrics) EXPECT() *MockIMetricsMockRecorder {
	return m.recorder
}

// CheckableFeedCount mocks base method.
func (m *MockIMetrics) CheckableFeedCount(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckableFeedCount", arg0)
}

// CheckableFeedCount indicates an expected call of CheckableFeedCount.
func (mr *MockIMetricsMockRecorder) CheckableFeedCount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckableFeedCount", reflect.TypeOf((*MockIMetrics)(nil).CheckableFeedCount), arg0)
}

// CurrentConnections mocks base method.
func (m *MockIMetrics) CurrentConnections(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CurrentConnections", arg0)
}

// CurrentConnections indicates an expected call of CurrentConnections.
func (mr *MockIMetricsMockRecorder) CurrentConnections(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentConnections", reflect.TypeOf((*MockIMetrics)(nil).CurrentConnections), arg0)
}

// DbFileSize mocks base method.
func (m *MockIMetrics) DbFileSize(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DbFileSize", arg0)
}

// DbFileSize indicates an expected call of DbFileSize.
func (mr *MockIMetricsMockRecorder) DbFileSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbFileSize", reflect.TypeOf((*MockIMetrics)(nil).DbFileSize), arg0)
}

// FeedRequested mocks base method.
func (m *MockIMetrics) FeedRequested(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FeedRequested", arg0)
}

// FeedRequested indicates an expected call of FeedRequested.
func (mr *MockIMetricsMockRecorder) FeedRequested(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedRequested", reflect.TypeOf((*MockIMetrics)(nil).FeedRequested), arg0)
}

// FeedTootSent mocks base method.
func (m *MockIMetrics) FeedTootSent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FeedTootSent")
}

// FeedTootSent indicates an expected call of FeedTootSent.
func (mr *MockIMetricsMockRecorder) FeedTootSent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedTootSent", reflect.TypeOf((*MockIMetrics)(nil).FeedTootSent))
}

// FeedUpdated mocks base method.
func (m *MockIMetrics) FeedUpdated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FeedUpdated")
}

// FeedUpdated indicates an expected call of FeedUpdated.
func (mr *MockIMetricsMockRecorder) FeedUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedUpdated", reflect.TypeOf((*MockIMetrics)(nil).FeedUpdated))
}

// NewPostSaved mocks base method.
func (m *MockIMetrics) NewPostSaved() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewPostSaved")
}

// NewPostSaved indicates an expected call of NewPostSaved.
func (mr *MockIMetricsMockRecorder) NewPostSaved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPostSaved", reflect.TypeOf((*MockIMetrics)(nil).NewPostSaved))
}

// PostsDeleted mocks base method.
func (m *MockIMetrics) PostsDeleted(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostsDeleted", arg0)
}

// PostsDeleted indicates an expected call of PostsDeleted.
func (mr *MockIMetricsMockRecorder) PostsDeleted(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsDeleted", reflect.TypeOf((*MockIMetrics)(nil).PostsDeleted), arg0)
}

// ServiceStarted mocks base method.
func (m *MockIMetrics) ServiceStarted() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServiceStarted")
}

// ServiceStarted indicates an expected call of ServiceStarted.
func (mr *MockIMetricsMockRecorder) ServiceStarted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceStarted", reflect.TypeOf((*MockIMetrics)(nil).ServiceStarted))
}

// StartApubRequestIn mocks base method.
func (m *MockIMetrics) StartApubRequestIn(arg0 string) logic.IRequestObserver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApubRequestIn", arg0)
	ret0, _ := ret[0].(logic.IRequestObserver)
	return ret0
}

// StartApubRequestIn indicates an expected call of StartApubRequestIn.
func (mr *MockIMetricsMockRecorder) StartApubRequestIn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApubRequestIn", reflect.TypeOf((*MockIMetrics)(nil).StartApubRequestIn), arg0)
}

// StartApubRequestOut mocks base method.
func (m *MockIMetrics) StartApubRequestOut(arg0 string) logic.IRequestObserver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartApubRequestOut", arg0)
	ret0, _ := ret[0].(logic.IRequestObserver)
	return ret0
}

// StartApubRequestOut indicates an expected call of StartApubRequestOut.
func (mr *MockIMetricsMockRecorder) StartApubRequestOut(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApubRequestOut", reflect.TypeOf((*MockIMetrics)(nil).StartApubRequestOut), arg0)
}

// StartWebRequestIn mocks base method.
func (m *MockIMetrics) StartWebRequestIn(arg0 string) logic.IRequestObserver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWebRequestIn", arg0)
	ret0, _ := ret[0].(logic.IRequestObserver)
	return ret0
}

// StartWebRequestIn indicates an expected call of StartWebRequestIn.
func (mr *MockIMetricsMockRecorder) StartWebRequestIn(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWebRequestIn", reflect.TypeOf((*MockIMetrics)(nil).StartWebRequestIn), arg0)
}

// TootQueueLength mocks base method.
func (m *MockIMetrics) TootQueueLength(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TootQueueLength", arg0)
}

// TootQueueLength indicates an expected call of TootQueueLength.
func (mr *MockIMetricsMockRecorder) TootQueueLength(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TootQueueLength", reflect.TypeOf((*MockIMetrics)(nil).TootQueueLength), arg0)
}

// TotalFollowers mocks base method.
func (m *MockIMetrics) TotalFollowers(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TotalFollowers", arg0)
}

// TotalFollowers indicates an expected call of TotalFollowers.
func (mr *MockIMetricsMockRecorder) TotalFollowers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalFollowers", reflect.TypeOf((*MockIMetrics)(nil).TotalFollowers), arg0)
}

// TotalPosts mocks base method.
func (m *MockIMetrics) TotalPosts(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TotalPosts", arg0)
}

// TotalPosts indicates an expected call of TotalPosts.
func (mr *MockIMetricsMockRecorder) TotalPosts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalPosts", reflect.TypeOf((*MockIMetrics)(nil).TotalPosts), arg0)
}
